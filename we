#!/usr/bin/env python

import os
import re
import argparse
import settings
import subprocess

### Methods
def new(name):
	# TODO: change to distribution directory
	files_dir = "/Users/Admin/Desktop/Code/Git/webapp-enhanced"
	
	print bcolors.green + "> Creating new project `%s`" % name + bcolors.end
	run("mkdir %s" % name)
	
	print bcolors.green + "> Adding files" + bcolors.end
	run("cp -r %s/ ./%s" % (files_dir, name))
	
	print bcolors.green + "> Removing units" + bcolors.end
	run("rm -rf ./%s/MANIFEST.in" % name)
	run("rm -rf ./%s/temp" % name)
	run("rm -rf ./%s/we" % name)
	run("rm -rf ./%s/setup.py" % name)
	run("rm -rf ./%s/settings.py" % name)
	run("rm -rf ./%s/settings.pyc" % name)
	run("rm -rf ./%s/build" % name)
	run("rm -rf ./%s/dist" % name)
	run("rm -rf ./%s/Webapp_Enhanced.egg-info" % name)
	
	print bcolors.green + "> Finished!" + bcolors.end

def gen(g_type, name):
	# TODO: change to distribution directory
	temp_dir = "/Users/Admin/Desktop/Code/Git/webapp-enhanced/temp"
	
	s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
	lname = re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()
	
	if g_type == "model":
		print bcolors.green + "> Generating %s `%s`" % (g_type, name) + bcolors.end
		print bcolors.green + "> Adding files" + bcolors.end
		run("mkdir ./views/%s" % lname)
		run("mkdir ./abstract/haml/%s" % lname)
		run("cp %s/template-model-index ./abstract/haml/%s/index.haml" % (temp_dir, lname))
		run("cp %s/template ./abstract/haml/%s/new.haml" % (temp_dir, lname))
		run("cp %s/template-model-show ./abstract/haml/%s/show.haml" % (temp_dir, lname))
		run("cp %s/controller-model ./controllers/%s.py" % (temp_dir, lname))
		run("cp %s/model ./models/%s.py" % (temp_dir, lname))
		
		print bcolors.green + "> Formatting code" + bcolors.end
		format("./controllers/%s.py" % lname, name = name, lname = lname)
		format("./models/%s.py" % lname, name = name, lname = lname)
		
	elif g_type == "controller":
		print bcolors.green + "> Generating %s `%s`" % (g_type, name) + bcolors.end
		print bcolors.green + "> Adding files" + bcolors.end
		run("cp %s/controller ./controllers/%s.py" % (temp_dir, lname))
		
		print bcolors.green + "> Formatting code" + bcolors.end
		format("./controllers/%s.py" % lname, name = name, lname = lname)
		
	elif g_type == "view":
		print bcolors.green + "> Generating %s `%s`" % (g_type, name) + bcolors.end
		print bcolors.green + "> Adding files" + bcolors.end
		run("mkdir ./views/%s" % lname)
		run("mkdir ./abstract/haml/%s" % lname)
		run("cp %s/template ./abstract/haml/%s/index.haml" % (temp_dir, lname))
		run("cp %s/controller-view ./controllers/%s.py" % (temp_dir, lname))
		
		print bcolors.green + "> Formatting code" + bcolors.end
		format("./controllers/%s.py" % lname, name = name, lname = lname)
	
	elif g_type == "blob":
		print bcolors.green + "> Generating %s `%s`" % (g_type, name) + bcolors.end
		print bcolors.green + "> Adding files" + bcolors.end
		run("mkdir ./views/%s" % lname)
		run("mkdir ./abstract/haml/%s" % lname)
		run("cp %s/template-model-index ./abstract/haml/%s/index.haml" % (temp_dir, lname))
		run("cp %s/template-blob-new ./abstract/haml/%s/new.haml" % (temp_dir, lname))
		run("cp %s/template-model-show ./abstract/haml/%s/show.haml" % (temp_dir, lname))
		run("cp %s/controller-blob ./controllers/%s.py" % (temp_dir, lname))
		run("cp %s/controller-blob-upload ./controllers/%s_upload.py" % (temp_dir, lname))
		run("cp %s/controller-blob-download ./controllers/%s_download.py" % (temp_dir, lname))
		run("cp %s/model-blob ./models/%s.py" % (temp_dir, lname))
		
		print bcolors.green + "> Formatting code" + bcolors.end
		format("./controllers/%s.py" % lname, name = name, lname = lname)
		format("./controllers/%s_upload.py" % lname, name = name, lname = lname)
		format("./controllers/%s_download.py" % lname, name = name, lname = lname)
		format("./models/%s.py" % lname, name = name, lname = lname)
		
	else:
		print bcolors.red + "> No setting found for type `%s`!" % g_type + bcolors.end
		return
	
	print bcolors.green + "> Compiling abstracts" + bcolors.end
	compile_abs()
	
	print bcolors.green + "> Finished!" + bcolors.end

def test(port):
	print bcolors.green + "> Compiling abstracts" + bcolors.end
	compile_abs()
	print bcolors.green + "> Starting appserver in port %s" % port + bcolors.end
	run("clear")
	run("dev_appserver.py . --port=%s" % port)

def deploy():
	print bcolors.green + "> Compiling abstracts" + bcolors.end
	compile_abs()
	print bcolors.green + "> Initiating deploy" + bcolors.end
	run("clear")
	run("appcfg.py update .")

def compile_abs():
	exclude = ['.DS_Store']
	haml_dirs = [f for f in os.listdir('./abstract/haml') if not f in exclude]
	sass_files = [f for f in os.listdir('./abstract/sass') if re.match(r'.+\.(sass|scss)', f)]
	
	haml_files = []
	for d in haml_dirs:
		if not d == 'base.haml':
			current_files = [('%s/' % d) + f for f in os.listdir('./abstract/haml/%s' % d) if re.match(r'.+\.haml', f)]
			haml_files = haml_files + current_files
	
	# Compilations
	for f in haml_files:
		run("haml abstract/haml/%s views/%s" % (f, f[:-4] + 'html'))
	for f in sass_files:
		run("sass abstract/sass/%s assets/css/%s" % (f, f[:-4] + 'css'))
	run("coffee -c --output assets/js abstract/coffee/")
	run("haml abstract/haml/base.haml views/base.html")
	

### Only for the program
def run(command):
	subprocess.call(command.split())

def format(filepath, **kw):
	with open(filepath, 'r+') as f:
		old_content = f.read()
		f.truncate()
	new_content = old_content.format(**kw)
	with open(filepath, 'w') as f:
		f.write(new_content)

### Parser instance
parser = argparse.ArgumentParser(prog='we')

parser.add_argument('-n', '--new', nargs=1, metavar='NAME',
                    help="create a new project")
parser.add_argument('-g', '--generate', nargs=2, metavar=('TYPE', 'NAME'),
                    help="generate files for the project")
parser.add_argument('-t', '--test', nargs=1, metavar='PORT', type=int,
                    help="test the project on specified port")
parser.add_argument('-d', '--deploy', action='store_true',
                    help="deploy the project to app engine")
parser.add_argument('-c', '--compile', action='store_true',
                    help="compile abstracts (requires haml, sass, & coffee)")

args = parser.parse_args()

# Print colored output
class bcolors:
    header = '\033[95m'
    blue = '\033[94m'
    green = '\033[92m'
    yellow = '\033[93m'
    red = '\033[91m'
    end = '\033[0m'


### Actions
if args.new:
	new(*args.new)
if args.generate:
	gen(*args.generate)
if args.test:
	test(*args.test)
if args.deploy:
	deploy()
if args.compile:
	compile_abs()
if not (args.new or args.generate or args.test or args.deploy or args.compile):
	print 'type `we -h` to see all options available'
